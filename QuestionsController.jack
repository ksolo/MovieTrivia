/** Core business logic for the game */
class QuestionsController {
  field QuestionBank questionBank;
  field int strikes;

  constructor QuestionsController new(QuestionBank questionBankParam) {
    let strikes = 0;
    let questionBank = questionBankParam;
    return this;
  }

  method boolean continueGame() {
    return (strikes < 3) & (questionBank.hasNextQuestion());
  }

  method void run() {
    var Question question;
    var AnswerResultScreen result;
    var GameOverScreen gameOver;

    while(continueGame()) {
      do Screen.clearScreen();

      let question = questionBank.next();
      do presentQuestion(question);
      let result = gradeQuestion(question);

      if (strikes < 3) {
        do result.draw();
      }
      do result.dispose();
    }

    let gameOver = GameOverScreen.new();

    if (strikes < 3) {
      do gameOver.drawWinningScreen();
    } else {
      do gameOver.drawLosingScreen();
    }
    return;
  }

  method void presentQuestion(Question question) {
    var QuestionScreen questionScreen;
    let questionScreen = QuestionScreen.new(question);

    do questionScreen.draw();
    do questionScreen.dispose();
    return;
  }

  method AnswerResultScreen gradeQuestion(Question question) {
    var Grader grader;
    var AnswerResultScreen result;

    let grader = Grader.new(question);
    do grader.getInput();
    do Screen.clearScreen();

    if (grader.answerIsCorrect()) {
      return AnswerResultScreen.new("Correct!", strikes);
    }

    let strikes = strikes + 1;
    let result = AnswerResultScreen.new("Sorry that is not correct", strikes);
    return result;
  }

  method void dispose() {
    do questionBank.dispose();
    do Memory.deAlloc(this);
    return;
  }
}
